import cv2
import mediapipe as mp
import matplotlib.pyplot as plt
import time
import numpy as np

plt.ion()  # Turn on interactive mode for live updating

def main():
    mpPose = mp.solutions.pose  # Load MediaPipe Pose model
    pose = mpPose.Pose()
    mpDrawing = mp.solutions.drawing_utils  # Utility for drawing
    
    cap = cv2.VideoCapture(0)  # Open webcam
    
    xData = []  # X-coordinates over time
    yData = []  # Y-coordinates over time
    verticalDistanceData = []  # Vertical distance between mouth/chin and shoulders
    timeData = []  # Time stamps
    
    startTime = time.time()
    fig, ax = plt.subplots()
    ax.set_xlabel("Time (s)")
    ax.set_ylabel("Position / Vertical Distance")
    ax.set_title("Landmark Position Over Time")
    lineX, = ax.plot([], [], label='X Position')
    lineY, = ax.plot([], [], label='Y Position')
    lineVD, = ax.plot([], [], label='Vertical Distance', linestyle='dashed')
    ax.legend()
    
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        frame = cv2.flip(frame, 1)  # Flip horizontally for natural interaction
        rgbFrame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert to RGB
        
        results = pose.process(rgbFrame)  # Detect pose
        
        if results.pose_landmarks:
            mpDrawing.draw_landmarks(
                frame, results.pose_landmarks, mpPose.POSE_CONNECTIONS,
                mpDrawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
                mpDrawing.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=2)
            )
            
            # Collect landmark data for the nose (or any landmark of choice)
            nose = results.pose_landmarks.landmark[mpPose.PoseLandmark.NOSE]
            mouthLeft = results.pose_landmarks.landmark[mpPose.PoseLandmark.MOUTH_LEFT]
            mouthRight = results.pose_landmarks.landmark[mpPose.PoseLandmark.MOUTH_RIGHT]
            leftShoulder = results.pose_landmarks.landmark[mpPose.PoseLandmark.LEFT_SHOULDER]
            rightShoulder = results.pose_landmarks.landmark[mpPose.PoseLandmark.RIGHT_SHOULDER]
            
            mouthY = (mouthLeft.y + mouthRight.y) / 2  # Approximate mouth position
            shoulderY = (leftShoulder.y + rightShoulder.y) / 2  # Average shoulder height
            verticalDistance = abs(mouthY - shoulderY)  # Distance between mouth and shoulders
            
            xData.append(nose.x)
            yData.append(nose.y)
            verticalDistanceData.append(verticalDistance)
            timeData.append(time.time() - startTime)
            
            # Update the graph in real-time
            lineX.set_xdata(timeData)
            lineX.set_ydata(xData)
            lineY.set_xdata(timeData)
            lineY.set_ydata(yData)
            lineVD.set_xdata(timeData)
            lineVD.set_ydata(verticalDistanceData)
            ax.relim()
            ax.autoscale_view()
            plt.draw()
            plt.pause(0.01)
        
        cv2.putText(frame, "Press 'q' to exit", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.imshow("Human Body Outline", frame)  # Display the frame
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    cap.release()
    cv2.destroyAllWindows()
    plt.ioff()
    plt.show()

if __name__ == "__main__":
    main()
