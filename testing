import cv2
import mediapipe as mp
import matplotlib.pyplot as plt
import time
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from cmu_graphics import *

plt.ion()  # Turn on interactive mode for live updating

def main():
    mpPose = mp.solutions.pose  # Load MediaPipe Pose model
    pose = mpPose.Pose()
    mpDrawing = mp.solutions.drawing_utils  # Utility for drawing
    
    cap = cv2.VideoCapture(0)  # Open webcam
    
    xData = []  # X-coordinates over time
    yData = []  # Y-coordinates over time
    zData = []  # Z-coordinates over time
    verticalDistanceData = []  # Vertical distance between mouth/chin and shoulders
    timeData = []  # Time stamps
    
    startTime = time.time()
    
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        frame = cv2.flip(frame, 1)  # Flip horizontally for natural interaction
        rgbFrame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert to RGB
        
        results = pose.process(rgbFrame)  # Detect pose
        
        if results.pose_landmarks:
            mpDrawing.draw_landmarks(
                frame, results.pose_landmarks, mpPose.POSE_CONNECTIONS,
                mpDrawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
                mpDrawing.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=2)
            )
            
            # Collect landmark data for mouth and shoulders
            mouthLeft = results.pose_landmarks.landmark[mpPose.PoseLandmark.MOUTH_LEFT]
            mouthRight = results.pose_landmarks.landmark[mpPose.PoseLandmark.MOUTH_RIGHT]
            leftShoulder = results.pose_landmarks.landmark[mpPose.PoseLandmark.LEFT_SHOULDER]
            rightShoulder = results.pose_landmarks.landmark[mpPose.PoseLandmark.RIGHT_SHOULDER]
            
            mouthX = (mouthLeft.x + mouthRight.x) / 2  # Approximate mouth X position
            mouthY = (mouthLeft.y + mouthRight.y) / 2  # Approximate mouth Y position
            mouthZ = (mouthLeft.z + mouthRight.z) / 2  # Approximate mouth Z position
            shoulderY = (leftShoulder.y + rightShoulder.y) / 2  # Average shoulder height
            verticalDistance = abs(mouthY - shoulderY)  # Distance between mouth and shoulders
            
            xData.append(mouthX)
            yData.append(mouthY)
            zData.append(mouthZ)

            verticalDistanceData.append(verticalDistance)
            timeData.append(time.time() - startTime)
        
        cv2.putText(frame, "Press 'q' to exit", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.imshow("Human Body Outline", frame)  # Display the frame
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    cap.release()
    cv2.destroyAllWindows()
    plt.ioff()
    
    # Plot 3D graph after camera stops
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.set_xlabel("X Position")
    ax.set_ylabel("Y Position")
    ax.set_zlabel("Z Position")
    ax.set_title("3D Landmark Movement")
    ax.scatter(xData, yData, zData, c=timeData, cmap='viridis', marker='o')
    plt.show()

if __name__ == "__main__":
    main()


cmu_graphics.run()

