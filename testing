import cv2
import mediapipe as mp
import matplotlib.pyplot as plt
import time
import numpy as np

plt.ion()  # Turn on interactive mode for live updating

def main():
    mp_pose = mp.solutions.pose  # Load MediaPipe Pose model
    pose = mp_pose.Pose()
    mp_drawing = mp.solutions.drawing_utils  # Utility for drawing
    
    cap = cv2.VideoCapture(0)  # Open webcam
    
    x_data = []  # X-coordinates over time
    y_data = []  # Y-coordinates over time
    time_data = []  # Time stamps
    
    start_time = time.time()
    fig, ax = plt.subplots()
    ax.set_xlabel("Time (s)")
    ax.set_ylabel("Position")
    ax.set_title("Landmark Position Over Time")
    line_x, = ax.plot([], [], label='X Position')
    line_y, = ax.plot([], [], label='Y Position')
    ax.legend()
    
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        frame = cv2.flip(frame, 1)  # Flip horizontally for natural interaction
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert to RGB
        
        results = pose.process(rgb_frame)  # Detect pose
        
        if results.pose_landmarks:
            mp_drawing.draw_landmarks(
                frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
                mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=2)
            )
            
            # Collect landmark data for the nose (or any landmark of choice)
            mouth_right = results.pose_landmarks.landmark[mp_pose.PoseLandmark.MOUTH_CONNECTIONS]
            right_shoulder = results.pose_landmarks.landmark[mp_pose.PoseLandmark.right_shoulder]
            # x_data.append(nose.x)
            y_data.append(mouth_right.y - right_shoulder.y)
            time_data.append(time.time() - start_time)
            
            # Update the graph in real-time
            line_x.set_xdata(time_data)
            line_x.set_ydata(x_data)
            line_y.set_xdata(time_data)
            line_y.set_ydata(y_data)
            ax.relim()
            ax.autoscale_view()
            plt.draw()
            plt.pause(0.01)
        
        cv2.putText(frame, "Press 'q' to exit", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.imshow("Human Body Outline", frame)  # Display the frame
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    cap.release()
    cv2.destroyAllWindows()
    plt.ioff()
    plt.show()

if __name__ == "__main__":
    main()


